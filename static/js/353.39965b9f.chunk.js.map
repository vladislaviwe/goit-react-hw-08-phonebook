{"version":3,"file":"static/js/353.39965b9f.chunk.js","mappings":"8PAEaA,EAAUC,EAAAA,GAAAA,OAAH,sIAQPC,EAAYD,EAAAA,GAAAA,EAAH,wCAITE,EAAQF,EAAAA,GAAAA,MAAH,4L,mBCRH,SAASG,EAAT,GAAmC,IAAZC,EAAW,EAAXA,SAClC,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,GAASC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IACjCC,GAAUF,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAClCE,GAAaH,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAErCG,EAAe,SAACC,GAClB,MAAwBA,EAAEC,OAAlBb,EAAR,EAAQA,KAAMc,EAAd,EAAcA,MACd,OAAQd,GACJ,IAAK,OACD,OAAOC,EAAQa,GACnB,IAAK,QACD,OAAOX,EAASW,GACpB,IAAK,WACD,OAAOT,EAAYS,GACvB,QACI,OAEX,EAUH,OACE,kBAAMhB,SATe,SAACc,GAClBA,EAAEG,iBACFjB,EAAS,CAACE,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,IACvBH,EAAQ,IACRE,EAAS,IACTE,EAAY,GACf,EAGD,WACI,8BACI,SAACV,EAAD,qBACA,SAACC,EAAD,CACIoB,KAAK,OACLhB,KAAK,OACLiB,GAAIX,EACJQ,MAAOd,EACPkB,SAAUP,EACVQ,UAAQ,QAGhB,8BACI,SAACxB,EAAD,sBACA,SAACC,EAAD,CACIoB,KAAK,QACLhB,KAAK,QACLiB,GAAIR,EACJK,MAAOZ,EACPgB,SAAUP,EACVQ,UAAQ,QAGhB,8BACI,SAACxB,EAAD,yBACA,SAACC,EAAD,CACIoB,KAAK,WACLhB,KAAK,WACLiB,GAAIP,EACJI,MAAOV,EACPc,SAAUP,EACVQ,UAAQ,QAGhB,SAAC1B,EAAD,CAASuB,KAAK,SAAd,2BAGP,CCtEc,SAASI,IACpB,IAAMC,GAAWC,EAAAA,EAAAA,MAMjB,OACI,iCACI,0CACA,SAACzB,EAAD,CAAcC,SAPH,SAACyB,GAChBF,GAASG,EAAAA,EAAAA,IAAOD,GACnB,MAQJ,C,wDCjBM,IAkBIf,EAAS,eAACiB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACZ,EAAIa,GAWvD,OAREb,IAFFa,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/RegisterForm/RegisterFormStyled.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const FormBtn = styled.button`\n    cursor: pointer;\n    display: block;\n\n    width: 100px;\n    padding: 10px;\n    margin: 16px auto 0;\n`\nexport const LabelText = styled.p`\n    margin: 0;\n`\n\nexport const Input = styled.input`\n    border-radius: 5px;\n    opacity: 50%;\n\n\n    &:hover, &:focus {\n        opacity: 40%;\n        filter: drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.3));\n    }\n`","import { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\n\nimport { LabelText, Input, FormBtn } from './RegisterFormStyled';\nimport { useState, useMemo } from 'react';\n\nexport default function RegisterForm({onSubmit}) {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('')\n\n    const nameId = useMemo(() => nanoid(), []);\n    const emailId = useMemo(() => nanoid(), []);\n    const passwordId = useMemo(() => nanoid(), []);\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        switch (name) {\n            case 'name':\n                return setName(value);\n            case 'email':\n                return setEmail(value);\n            case 'password':\n                return setPassword(value);\n            default:\n                return;\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({name, email, password});\n        setName('');\n        setEmail('');\n        setPassword('');\n    }\n\n  return (\n    <form onSubmit={handleSubmit}>\n        <label>\n            <LabelText>Name:</LabelText>\n            <Input\n                type=\"text\"\n                name=\"name\"\n                id={nameId}\n                value={name}\n                onChange={handleChange}\n                required\n            />\n        </label>\n        <label>\n            <LabelText>Email:</LabelText>\n            <Input\n                type=\"email\"\n                name=\"email\"\n                id={emailId}\n                value={email}\n                onChange={handleChange}\n                required\n            />\n        </label>\n        <label>\n            <LabelText>Password:</LabelText>\n            <Input\n                type=\"password\"\n                name=\"password\"\n                id={passwordId}\n                value={password}\n                onChange={handleChange}\n                required\n            />\n        </label>\n        <FormBtn type=\"submit\">Registraton</FormBtn>\n    </form>\n  )\n}\n\nRegisterForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n}","import { useDispatch } from \"react-redux\"\nimport { signup } from \"redux/auth/auth-operations\"\n\nimport RegisterForm from \"components/RegisterForm/RegisterForm\"\n\nexport default function RegisterPage() {\n    const dispatch = useDispatch();\n\n    const onRegister = (data) => {\n        dispatch(signup(data));\n    }\n\n    return (\n        <>\n            <h1>Registration</h1>\n            <RegisterForm onSubmit={onRegister}/>\n        </>\n    )\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["FormBtn","styled","LabelText","Input","RegisterForm","onSubmit","useState","name","setName","email","setEmail","password","setPassword","nameId","useMemo","nanoid","emailId","passwordId","handleChange","e","target","value","preventDefault","type","id","onChange","required","RegisterPage","dispatch","useDispatch","data","signup","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}